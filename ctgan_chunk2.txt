# CTGAN HYPERPARAMETER OPTIMIZATION EXECUTION
# Run the actual optimization study with proper setup

print("🎯 Starting CTGAN Hyperparameter Optimization - CORRECTED PAC FIX")
print(f"   • Target column: '{TARGET_COLUMN}' (dynamic detection)")
print("   • 🔧 CORRECTED FIX: Simplified PAC compatibility with runtime adjustment")
print("   • PAC values: [1, 2, 4, 8, 10, 16] with runtime compatibility checking")
print("   • Search space: 13 parameters")
print("   • Number of trials: 10")
print("   • Algorithm: TPE with median pruning")
print()

# Create the optimization study
ctgan_study = optuna.create_study(
    direction='maximize',
    pruner=optuna.pruners.MedianPruner(n_startup_trials=5, n_warmup_steps=2)
)

# Run the optimization
try:
    # Ensure we have the required global variables
    if 'data' not in globals():
        raise ValueError("❌ Data not available - please run data loading sections first")
        
    if 'TARGET_COLUMN' not in globals():
        TARGET_COLUMN = 'outcome'  # fallback
        print(f"⚠️  TARGET_COLUMN not set, using fallback: '{TARGET_COLUMN}'")
    
    print(f"📊 Dataset info: {data.shape[0]} rows, {data.shape[1]} columns")
    print(f"📊 Target column '{TARGET_COLUMN}' unique values: {data[TARGET_COLUMN].nunique()}")
    print()
    
    # Run the optimization trials
    ctgan_study.optimize(ctgan_objective, n_trials=10, timeout=3600)  # 1 hour timeout
    
    # Display results
    print(f"\n📊 CTGAN hyperparameter optimization with corrected PAC compatibility completed!")
    print("🎯 No more dynamic parameter name issues - simplified and robust approach")
    
    # Best trial information
    best_trial = ctgan_study.best_trial
    print(f"\n🏆 Best Trial Results:")
    print(f"   • Best Score: {best_trial.value:.4f}")
    print(f"   • Trial Number: {best_trial.number}")
    print(f"   • Best Parameters:")
    for key, value in best_trial.params.items():
        print(f"     - {key}: {value}")
    
    # Summary statistics
    completed_trials = [t for t in ctgan_study.trials if t.state == optuna.trial.TrialState.COMPLETE]
    failed_trials = [t for t in ctgan_study.trials if t.state == optuna.trial.TrialState.FAIL]
    
    print(f"\n📈 Optimization Summary:")
    print(f"   • Total trials completed: {len(completed_trials)}")
    print(f"   • Failed trials: {len(failed_trials)}")
    if completed_trials:
        scores = [t.value for t in completed_trials]
        print(f"   • Best score: {max(scores):.4f}")
        print(f"   • Mean score: {sum(scores)/len(scores):.4f}")
        print(f"   • Score range: {max(scores) - min(scores):.4f}")
    
    # Store results for Section 4.1.1 analysis
    ctgan_optimization_results = {
        'study': ctgan_study,
        'best_trial': best_trial,
        'completed_trials': completed_trials,
        'failed_trials': failed_trials
    }
    
    print(f"\n✅ CTGAN optimization data ready for Section 4.1.1 analysis")
    
except Exception as e:
    print(f"❌ CTGAN hyperparameter optimization failed: {str(e)}")
    print(f"🔍 Error details: {repr(e)}")
    import traceback
    traceback.print_exc()
    
    # Create dummy results for analysis to continue
    ctgan_study = None
    ctgan_optimization_results = None
    print("⚠️  CTGAN optimization failed - Section 4.1.1 analysis will show 'data not found' message")
